<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/08/hello-world/"/>
    <url>/2024/06/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>title</title>
    <link href="/2024/06/08/Docker%20%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2024/06/08/Docker%20%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-基础篇"><a href="#Docker-基础篇" class="headerlink" title="Docker 基础篇"></a>Docker 基础篇</h2><p>尚硅谷Docker教程：<a href="https://www.bilibili.com/video/BV1gr4y1U7CY/">https://www.bilibili.com/video/BV1gr4y1U7CY/</a></p><p>docker 官网：<a href="http://www.docker.com/">http://www.docker.com</a></p><p>Docker Hub 官网：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h4><p><strong>Docker是基于Go语言实现的云开源项目。</strong></p><p>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次镜像，处处运行”。</p><h4 id="整体架构及底层通信原理简述"><a href="#整体架构及底层通信原理简述" class="headerlink" title="整体架构及底层通信原理简述"></a>整体架构及底层通信原理简述</h4><p>Docker 是一个 C&#x2F;S 模式的架构，后端是一个松耦合架构，众多模块各司其职。</p><p><a href="https://cdn.gumengyo.top//202304132205266.png"><img src="https://cdn.gumengyo.top//202304132205266.png"></a></p><p><a href="https://cdn.gumengyo.top//202304132206500.png"><img src="https://cdn.gumengyo.top//202304132206500.png"></a>### 一、初次启动测试</p><table><thead><tr><th><code>1</code><br/></th><th><code>docker run hello-world</code><br/><code>ROUTEROS</code></th></tr></thead></table><p><a href="https://cdn.gumengyo.top//202304112210801.png"><img src="https://cdn.gumengyo.top//202304112210801.png"></a></p><h3 id="二、Docker-常用命令"><a href="#二、Docker-常用命令" class="headerlink" title="二、Docker 常用命令"></a>二、Docker 常用命令</h3><h4 id="1-帮助启动类命令"><a href="#1-帮助启动类命令" class="headerlink" title="1. 帮助启动类命令"></a>1. 帮助启动类命令</h4><p>启动docker：<code>systemctl start docker</code><br>停l止docker：<code>systemctl stop docker</code><br>重启docker：<code>systemctl restart docker</code><br>查看docker&gt;状态：<code>systemctl status docker</code><br>开机启动：<code>systemctl enable docker</code><br>查看docker概要信息：<code>docker info</code><br>查看docker总体帮助文档：<code>docker-help</code><br>查看docker命令帮助文档：<code>docker具体命令-help</code></p><h4 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2. 镜像命令"></a>2. 镜像命令</h4><p>列出本地主机上的镜像：<code>docker imags</code></p><ul><li>-a：列出本地所有的镜像（含历史映像层）</li><li>-q：只显示镜像ID</li></ul><p>查找镜像：<code>docker search 镜像名字</code></p><p>拉取镜像：<code>docker pull 镜像名[TAG]</code></p><ul><li>TAG为空则默认为latest</li></ul><p>查看镜像&#x2F;容器&#x2F;数据卷 所占用的空间：<code>docker system df</code></p><p>删除镜像：<code>docker rmi 镜像ID</code></p><ul><li>删除单个：<code>docker rmi -f 镜像ID</code></li><li>删除多个：<code>docker rmi-f 镜像名1:TAG 镜像名2:TAG</code></li><li>删除全部：<code>docker rmi-f $(docker images -qa)</code></li></ul><p><strong>面试题</strong>：仓库名、标签都是的镜像，俗称虚悬镜像dangling image</p><h4 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3. 容器命令"></a>3. 容器命令</h4><p>新建启动容器：<code>dokcer run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p><p>OPTIONS说明（常用）：有些是一个减号，有些是两个减号</p><p>–name&#x3D;“容器新名字” 为容器指定一个名称；</p><p>-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；</p><p>-i：以交互模式运行容器，通常与 -t 同时使用；</p><p>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p>也即启动交互式容器(前台有伪终端，等待交互)；</p><p>-P: 随机端口映射，大写P</p><p>-p: 指定端口映射，小写p</p><p><a href="https://cdn.gumengyo.top//202304112320335.png"><img src="https://cdn.gumengyo.top//202304112320335.png"></a></p><table><thead><tr><th><code>1</code><br/><code>2</code><br/><code>3</code><br/></th><th><code>#使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</code><br/><code>docker run -it centos /bin/bash </code><br/><code>APPLESCRIPT</code></th></tr></thead></table><p>参数说明：</p><ul><li>-i: 交互式操作。</li><li>-t: 终端。</li><li>centos : centos 镜像。</li><li>&#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li><li>要退出终端，直接输入 exit:</li></ul><p>列出当前所有正在运行的容器：<code>docker ps [OPTIONS]</code></p><p>OPTIONS说明（常用）：</p><ul><li>-a :列出当前所有正在运行的容器+历史上运行过的</li><li>-l :显示最近创建的容器。</li><li>-n：显示最近n个创建的容器。</li><li>-q :静默模式，只显示容器编号。</li></ul><p><strong>退出容器</strong></p><ul><li><code>exit</code>：run进去容器，exit退出，容器停止</li><li><code>ctrl+p+q</code>：run进去容器，ctrl+p+q退出，容器不停止</li></ul><p>启动已经停止运行的容器：docker start 容器 ID 或者容器名<br>重启容器：docker restart 容器 ID 或者容器名<br>停止容器：docker stop 容器 ID 或者容器名<br>强制停止容器：docker kil 训容器ID或容器名<br>删除已停止容器：docker rm容器 ID</p><hr><p><strong>重要</strong></p><p>查看容器日志：<code>docker logs 容器ID</code></p><p>查看容器内运行的进程：<code>docker top 容器ID</code></p><p>查看容器内部细节： <code>docker inspect 容器ID</code></p><p>从容器内拷贝文件到主机上：<code>docker cp容器D:容器内路径目的主机路径</code></p><p>导出容器：<code>docker export 容器ID &gt; 文件名.tar</code></p><p>导入容器：<code>docker import - 镜像用户/镜像名:镜像版本号</code></p><p>提交容器副本使之成为一个新的镜像：</p><p><code>docker commit -m =&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</code></p><h3 id="三、docker镜像"><a href="#三、docker镜像" class="headerlink" title="三、docker镜像"></a>三、docker镜像</h3><h4 id="1-镜像"><a href="#1-镜像" class="headerlink" title="1. 镜像"></a>1. 镜像</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/06/07/test/"/>
    <url>/2024/06/07/test/</url>
    
    <content type="html"><![CDATA[<p>1&#96;11</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
